library(arules)
library(arulesViz)
library(wordcloud)
library(tidyverse)
library(colorspace)
library(iplots)
#check data
mooc_dataset <- read.csv("big_student_clear_third_version.csv")
#2
#Question2_1
MOOC_single_format <- read.transactions("MOOC_User_Course.csv", format = "single",
header = TRUE, cols = c(1,2), rm.duplicates = TRUE, skip = 1)
summary(MOOC_single_format)
str(MOOC_single_format)
#Question2_2
item_name <- itemLabels(MOOC_single_format)
item_count <- itemFrequency(MOOC_single_format)*nrow(MOOC_single_format)
col <- brewer.pal(10,"Paired")
wordcloud(words = item_name, freq = item_count, min.freq = 100,
scale = c(1,0.2), col = col,  random.order = FALSE)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.8)
itemFrequencyPlot(MOOC_single_format, topN = 5, type = "absolute", cex.names = 0.8)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.7)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.8)
itemFrequencyPlot(MOOC_single_format, support = 0.5, cex.names = 0.8)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.8)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.8)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.6)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.5)
itemFrequencyPlot(MOOC_single_format, support = 0.01, cex.names = 0.6)
itemFrequencyPlot(MOOC_single_format, topN = 5, type = "absolute", cex.names = 0.8)
##Step3_Generate Rules and interpret Results
#Question3_1
Support <- c(0.0005, 0.001, 0.005, 0.05)
Confidence <- c(0.0005, 0.001, 0.005, 0.05)
matrix_rules <- matrix(0,4,4)
rownames(matrix_rules) <- paste0("Support = ",Support)
colnames(matrix_rules) <- paste0("Confidence = ",Confidence)
matrix_rules
for(i in 1:4){
for(j in 1:3){
tmp_a <- Support[i]
tmp_b <- Confidence[j]
cat("Support:",Support[i],",Confidence:",Confidence[j],"\n")
tmp_rule <- apriori(MOOC_single_format, parameter = list(support = tmp_a, confidence = tmp_b))
tmp_rule <- data.frame(length(tmp_rule), tmp_a, tmp_b)
tmp_cnt <- tmp_rule[,1]
matrix_rules[i,j] <- tmp_cnt
}
}
matrix_rules
write.csv(matrix_rules, file = "question3_1.csv")
##Step3_Generate Rules and interpret Results
#Question3_1
Support <- c(0.0005,  0.001, 0.0025, 0.005)
Confidence <- c(0.0005, 0.001, 0.005, 0.05)
matrix_rules <- matrix(0,4,4)
rownames(matrix_rules) <- paste0("Support = ",Support)
colnames(matrix_rules) <- paste0("Confidence = ",Confidence)
matrix_rules
for(i in 1:4){
for(j in 1:3){
tmp_a <- Support[i]
tmp_b <- Confidence[j]
cat("Support:",Support[i],",Confidence:",Confidence[j],"\n")
tmp_rule <- apriori(MOOC_single_format, parameter = list(support = tmp_a, confidence = tmp_b))
tmp_rule <- data.frame(length(tmp_rule), tmp_a, tmp_b)
tmp_cnt <- tmp_rule[,1]
matrix_rules[i,j] <- tmp_cnt
}
}
matrix_rules
##Step3_Generate Rules and interpret Results
#Question3_1
Support <- c(0.0005,  0.001, 0.0025, 0.005)
Confidence <- c(0.0005, 0.001, 0.005)
matrix_rules <- matrix(0,4,4)
rownames(matrix_rules) <- paste0("Support = ",Support)
colnames(matrix_rules) <- paste0("Confidence = ",Confidence)
matrix_rules
for(i in 1:4){
for(j in 1:3){
tmp_a <- Support[i]
tmp_b <- Confidence[j]
cat("Support:",Support[i],",Confidence:",Confidence[j],"\n")
tmp_rule <- apriori(MOOC_single_format, parameter = list(support = tmp_a, confidence = tmp_b))
tmp_rule <- data.frame(length(tmp_rule), tmp_a, tmp_b)
tmp_cnt <- tmp_rule[,1]
matrix_rules[i,j] <- tmp_cnt
}
}
matrix_rules
matrix_rules <- matrix(0,4,3)
rownames(matrix_rules) <- paste0("Support = ",Support)
colnames(matrix_rules) <- paste0("Confidence = ",Confidence)
matrix_rules
for(i in 1:4){
for(j in 1:3){
tmp_a <- Support[i]
tmp_b <- Confidence[j]
cat("Support:",Support[i],",Confidence:",Confidence[j],"\n")
tmp_rule <- apriori(MOOC_single_format, parameter = list(support = tmp_a, confidence = tmp_b))
tmp_rule <- data.frame(length(tmp_rule), tmp_a, tmp_b)
tmp_cnt <- tmp_rule[,1]
matrix_rules[i,j] <- tmp_cnt
}
}
matrix_rules
write.csv(matrix_rules, file = "question3_1.csv")
write.csv(matrix_rules, file = "question3_1.csv")
write.csv(matrix_rules, file = "question3_2.csv")
#Question3_2
rules_as <- apriori(MOOC_single_format, parameter = list(support = 0.001, confidence = 0.05))
inspect(rules_as)
#Question3_2
rules <- apriori(MOOC_single_format, parameter = list(support = 0.001, confidence = 0.05))
inspect(rules)
inspect(sort(rules, by = "support"))
inspect(sort(rules, by = "confidence"))
inspect(sort(rules, by = "lift"))
rules
str(rules)
rules_df <- DATAFRAME(rules)
rules_df$Perf_Mea_New <- rules_df$support * rules_df$confidence * rules_df$lift
rules_df <- rules_as_df[order(rules_df[,7],decreasing = T),]
rules_df <- rules_df[order(rules_df[,7],decreasing = T),]
rules_df
write.csv(rules_df, file = "rules_perf_new.csv", row.names = FALSE)
boxplot(rules_as_df$lift, main = "lift")
boxplot(rules_df$lift, main = "lift")
points(mean(rules_df$lift))
summary(boxplot(rules_df$support))
plot(rules, method = "graph")
rules_1 <- subset(rules, lhs %pin% c("MITx_6.002x_India_Secondary"))
inspect(rules_1)
inspect(sort(rules, by = "support"))
rules_df
View(rules_df)
rules_df <- rules_df[order(rules_df[,8],decreasing = T),]
rules_df
rules_df
boxplot(rules_df$lift, main = "lift")
points(mean(rules_df$lift))
summary(boxplot(rules_df$support))
plot(rules, method = "graph")
rules_1 <- subset(rules, lhs %pin% c("MITx_6.002x_India_Secondary"))
inspect(rules_1)
#EXTRA_QUESTION
#grouped matrix for association rules
plot(rules_as, method = "grouped")
plot(rules_as, method = "graph", interactive = T)
plot(rules, method="graph", cex= 0.7, edgeCol = grey(0.005), arrowSize = 0.7)
plot(rules, method="paracoord")
library(arules)
library(arulesViz)
library(wordcloud)
library(tidyverse)
library(colorspace)
library(iplots)
plot(rules, method="graph", cex= 0.7, edgeCol = grey(0.005), arrowSize = 0.7)
install.packages("rJava")
library(iplots)
plot(rules, method = "graph")
rules_1 <- subset(rules, lhs %pin% c("MITx_6.002x_India_Secondary"))
inspect(rules_1)
plot(rules, method="graph", cex= 0.7, edgeCol = grey(0.005), arrowSize = 0.7)
plot(rules, method="paracoord")
plot(rules, method="graph", cex= 0.7, edgeCol = grey(0.005), arrowSize = 0.7)
plot(rules, method="paracoord")
plot(rules, method = "graph")
rules_1 <- subset(rules, lhs %pin% c("MITx_6.002x_India_Secondary"))
inspect(rules_1)
rules_1 <- subset(rules, lhs %pin% c("MITx")&rhs%pin%c("MITx"))
plot(rules, method = "graph")
rules_1 <- subset(rules, lhs %pin% c("MITx")&rhs%pin%c("MITx"))
inspect(rules_1)
